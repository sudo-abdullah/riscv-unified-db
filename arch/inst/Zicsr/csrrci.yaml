# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: inst_schema.json#
kind: instruction
name: csrrci
long_name: Atomic Read and Clear Bits with Immediate
description: |
  This variant is similar to `CSRRC`, except this updates 
  the CSR using an XLEN-bit value obtained by zero-extending a 5-bit unsigned immediate (`uimm[4:0]`)
  field encoded in the `rs1` field instead of a value from an integer register. For `CSRRCI`,
  if the `uimm[4:0]` field is zero, then these instructions will not write to the CSR,
  and shall not cause any of the side effects that might otherwise occur on a CSR write,
  nor raise illegal instruction exceptions on accesses to read-only CSRs. This will always read the CSR
  and cause any read side effects regardless of `rd` and `rs1` fields.
definedBy: Zicsr
assembly: xd, csr, imm
encoding:
  match: -----------------111-----1110011
  variables:
    - name: csr
      location: 31-20
    - name: uimm
      location: 19-15
    - name: xd
      location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
data_independent_timing: false
operation(): |
  Boolean will_write = uimm != 0;
  check_csr(csr, will_write, $encoding);

  XReg initial_csr_value = CSR[csr].sw_read();

  if (uimm != 0) {
    # set bits using the mask
    # performing any WARL transformations first
    XReg mask = uimm;
    CSR[csr].sw_write(initial_csr_value & ~mask);
  }

  X[xd] = initial_csr_value;
